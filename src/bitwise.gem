
/// The resulting integer's bit is `1`
/// if both corresponding source bits are `1`. 
proc std::bw::and(int, int) -> int = gera_std_bw_and

/// The resulting integer's bit is `1`
/// if at least one corresponding source bit is `1`. 
proc std::bw::or(int, int) -> int = gera_std_bw_or

/// The resulting integer's bit is `1`
/// if only one corresponding source bit is `1`. 
proc std::bw::xor(int, int) -> int = gera_std_bw_xor

/// The resulting integer's bit is `1`
/// if the corresponding source bit is `0`. 
proc std::bw::not(int) -> int = gera_std_bw_not

/// Shifts the bits in the first parameter by the number of bits
/// specified by the second parameter to the left.
/// The leftmost bits fall off, and newly inserted bits are `0`.
proc std::bw::lshift(int, int) -> int = gera_std_bw_lshift

/// **Preserves the sign!** For zero-fill shifting, use `std::bw::urshift`.
/// Shifts the bits in the first parameter by the number of bits
/// specified by the second parameter to the right.
/// The rightmost bits fall off, and newly inserted bits
/// are copies of the leftmost bit. 
proc std::bw::rshift(int, int) -> int = gera_std_bw_rshift

/// **Does not preserve the sign!**
/// For sign-preserving shifting, use `std::bw::rshift`.
/// Shifts the bits in the first parameter by the number of bits
/// specified by the second parameter to the right.
/// The rightmost bits fall off, and newly inserted bits are `0`. 
proc std::bw::urshift(int, int) -> int = gera_std_bw_urshift