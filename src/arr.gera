
mod std::arr

use std::(str, iter, opt, sort)
use std::coll::Vector

pub proc subarray(a, start, end) {
    mut var start_index = start
    case start < 0 -> start_index = length(a) + start
    mut var end_index = end
    case end < 0 -> end_index = length(a) + end
    case start_index > end_index -> {
        "the start index _ is larger than \
the end index _ (length of array is _)"
            |> str::fmt([
                start_index |> as_str(),
                end_index |> as_str(),
                a |> length() |> as_str()
            ])
            |> panic()
    }
    case start_index == end_index -> return []
    var dest_length = end_index - start_index
    var dest = array(a[start_index], dest_length)
    0..dest_length |> iter::for_each(|i| {
        dest[i] = a[start_index + i]
    })
    return dest
}

pub proc subarray_until(a, end_index) {
    return a |> subarray(0, end_index)
}

pub proc subarray_after(a, start_index) {
    return a |> subarray(start_index, a |> length())
}

pub proc concat(a, other_array) {
    case length(a) == 0 -> return other_array
    var r = array(a[0], length(a) + length(other_array))
    0..length(a) |> iter::for_each(|i| {
        r[i] = a[i]
    })
    var other_offset = length(a)
    0..length(other_array) |> iter::for_each(|i| {
        r[i + other_offset] = other_array[i]
    })
    return r
}

pub proc clone(a) {
    return a |> subarray(0, a |> length())
}

pub proc reversed(a) {
    var ac = a |> clone()
    0..(length(ac) / 2) |> iter::for_each(|o| {
        var left = o
        var right = length(ac) - 1 - o
        var old_left = ac[left]
        ac[left] = ac[right]
        ac[right] = old_left
    })
    return ac
}

pub proc iter(a) {
    return 0..length(a)
        |> iter::map(|i| a[i])
}

pub proc collect(i) {
    var dest = Vector::new()
    i |> iter::for_each(|e| dest .> push(e))
    return dest.content
        |> subarray_until(dest.size)
}

pub proc sorted(a, comp) {
    var ac = a |> clone()
    sort::quicksort(ac, 0, length(ac), comp)
    return ac
}