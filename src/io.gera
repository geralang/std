
mod std::io

use std::internal::io::*
use std::res::*

pub proc println(thing) = thing
    |> as_str()
    |> internal_println()

pub proc eprintln(thing) = thing
    |> as_str()
    |> internal_eprintln()

target c {
    pub proc print(thing) = thing
        |> as_str()
        |> internal_print()

    pub proc eprint(thing) = thing
        |> as_str()
        |> internal_eprint()

    proc ioresult_as_result(value) {
        case value.has_error -> return #err value.error
        return #ok value.value
    }

    proc ioresult_as_empty_result(value) {
        case value.has_error -> return #err value.error
        return #ok unit
    }

    pub proc set_cwd(path) = internal_set_cwd(path)
        |> ioresult_as_empty_result()

    pub proc get_cwd() = "."
        |> canonicalize()
        |> expect("Unable to get the current working directory!")


    pub proc file_exists(path) = internal_file_exists(path)

    pub proc canonicalize(path) = internal_canonicalize(path)
        |> ioresult_as_result()


    pub proc is_dir(path) = internal_is_dir(path)

    pub proc create_dir(path) = internal_create_dir(path)
        |> ioresult_as_empty_result()

    pub proc read_dir(path) = internal_read_dir(path)
        |> ioresult_as_result()

    pub proc delete_dir(path) = internal_delete_dir(path)
        |> ioresult_as_empty_result()


    pub proc is_file(path) = internal_is_file(path)

    pub proc write_file(content, path) = internal_write_file(content, path)
        |> ioresult_as_empty_result()

    pub proc read_file(path) = internal_read_file(path)
        |> ioresult_as_result()

    pub proc delete_file(path) = internal_delete_file(path)
        |> ioresult_as_empty_result()
}
