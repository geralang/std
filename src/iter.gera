/// This module contains procedures for working with iterators.
mod std::iter

use std::opt

/// Returns a new iterator over the items of `iter`,
/// where each item is mapped to the result of calling `mapping` with the item. 
pub proc map(iter, mapping) = || {
    case iter() {
        #next n -> return #next mapping(n)
        #end -> return #end unit
    }
}

/// Returns a new iterator over the items of `iter`,
/// only including the items for which `condition` returns true. 
pub proc filter(iter, condition) = || {
    mut result = #end unit
    exhaust(|| {
        val current
        case iter() {
            #next n -> current = n
            #end -> return #end unit
        }
        case condition(current) -> {
            result = #next current
            return #end unit
        }
        return #next unit
    })
    return result
}

/// Starting with the current value being `initial`,
/// fully exhausts the iterator `iter`, passing the current value
/// (first argument) and the current item from `iter` (second argument)
/// to `reduction`, making the result the new current value.
/// After the end of `iter` has been reached, the current value is returned.
pub proc reduce(iter, reduction, initial) {
    mut acc = initial
    iter |> map(-> {
        acc = reduction(acc, it)
    }) |> exhaust()
    return acc
}

/// Returns a new iterator over the items in `iter`.
/// Ends if either the end of `iter` has been reached or
/// `n` elements have been taken from `iter`.
pub proc take(iter, n) {
    mut i = 0
    return || {
        case i >= n -> return #end unit
        i = i + 1
        return iter()
    }
}

/// Returns a new iterator over the items in `iter`.
/// Ends if either the end of `iter` has been reached or
/// the function `cond` returns `false` when being passed the current item. 
pub proc take_while(iter, cond) {
    mut done = false
    return || {
        case done -> return #end unit
        val value
        case iter() {
            #next n -> value = n
            #end -> return #end unit
        }
        case cond(value) -> return #next value
        done = true
        return #end unit
    }
}

/// Takes and discards the next `n` elements from `iter`, returning `iter`.
pub proc skip(iter, n) {
    iter |> take(n) |> exhaust()
    return iter
}

/// Calls `action` for each item in `iter`.
/// Returns when the end of `iter` has been reached.
pub proc for_each(iter, action) = iter
    |> map(action)
    |> exhaust()

/// Returns a new iterator where each item in the sequence is the result of
/// calling `combinator` with the next items from `iter_a` and `iter_b`.
/// The iterator ends if either `iter_a` or `iter_b` end.
pub proc zip(iter_a, iter_b, combinator) = || {
    val val_a
    case iter_a() {
        #next v -> val_a = v
        #end -> return #end unit
    }
    val val_b
    case iter_b() {
        #next v -> val_b = v
        #end -> return #end unit
    }
    return #next combinator(val_a, val_b)
}

/// Returns a new iterator over the items of `iter_a`.
/// If the end of `iter_a` is reached,
/// the returned iterator will instead iterate over the items of `iter_b`.
/// The iterator ends if the ends of both `iter_a` and `iter_b` are reached.
pub proc chain(iter_a, iter_b) = || {
    case iter_a() {
        #next n -> return #next n
        #end -> return iter_b()
    }
}

/// Takes all items from `iter`, counting and returning the number of taken
/// elements from `iter` when the end is reached.
pub proc count(iter) = iter
    |> reduce(|count, e| count + 1, 0)

/// Takes and returns the next item from `iter`.
pub proc next(iter) {
    case iter() {
        #next v -> return #some v
        #end -> return #none unit
    }
}

/// Takes all items from `iter`, returning the last taken item
/// when the end is reached.
pub proc last(iter) {
    mut result = #none unit
    iter |> for_each(|v| {
        result = #some v
    })
    return result
}

/// Takes items from `iter` until `condition` returns `true` for a taken
/// item or the end of `iter` has been reached.
/// Returns the item for which `condition` returned `true`.
pub proc find(iter, condition) = iter
    |> filter(condition)
    |> next()

/// Takes all items from `iter`, returning the last taken item for which
/// `condition` returned `true` when the end is reached.
pub proc find_last(iter, condition) = iter
    |> filter(condition)
    |> last()

/// Returns a new iterator where each item is an object holding the next taken
/// item from `iter` and the number of items that were taken from `iter`
/// before it. The returned iterator ends when the end of
/// `iter` has been reached.
pub proc enumerate(iter) {
    mut i = 0
    return iter |> map(|v| {
        val ci = i
        i = i + 1
        return { index = ci, value = v }
    })
}

/// Takes items from `iter` until it finds one that is equal to `element`
/// or the end is reached. Returns `true` if an element has been found. 
pub proc has(iter, element) = iter
    |> find(|e| e == element)
    |> opt::is_some()

/// Returns an iterator without any elements.
pub proc empty() = || #end unit

/// Returns an iterator that only returns `v` once.
pub proc iter_value(v) {
    mut done = false
    return || {
        case done -> return #end unit
        done = true
        return #next v
    }
}

/// Returns an infinite iterator with each item in the sequence being the result
/// of calling `f`.
pub proc repeat_over(f) = || #next f()