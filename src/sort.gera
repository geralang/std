
mod std::sort

use std::(iter, opt)
use std::rng::Random

pub proc ascending(f) {
    return |a, b| f(a) - f(b)
}

pub proc descending(f) {
    return |a, b| f(b) - f(a)
}  

pub proc quicksort(array, start, end, comp) {
    case end - start <= 1 -> return unit
    var some_comp_val = comp(array[start], array[end])
    var zero = some_comp_val - some_comp_val
    var current = {
        left = start,
        right = end - 1
    }
    var pivot = array[current.left]//array[Random::int_in(current.left, current.right)]
    exhaust(|| {
        current.left = current.left..=current.right
            |> iter::find(|l| comp(array[l], pivot) >= zero)
            |> opt::expect("'l' is guaranteed to meet the pivot")
        current.right = current.right..=current.left
            |> iter::find(|r| comp(array[r], pivot) <= zero)
            |> opt::expect("'r' is guaranteed to meet the pivot")
        case array[current.left] == pivot && array[current.right] == pivot
            -> return #end unit
        var moved = array[current.left]
        array[current.left] = array[current.right]
        array[current.right] = moved
        return #next unit
    })
    quicksort(array, start, current.left, comp)
    quicksort(array, current.right + 1, end, comp)
}