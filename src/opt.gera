
mod std::opt

use std::iter

pub proc is_some(optional) {
    case optional {
        #some -> return true
    } else return false
}

pub proc is_none(optional) {
    case optional {
        #none -> return true
    } else return false
}

pub proc map(optional, mapping) {
    case optional {
        #some value -> return #some mapping(value)
    } else return #none unit
}

pub proc unwrap_or(optional, default) {
    case optional {
        #some value -> return value
    } else return default
}

pub proc unwrap_or_else(optional, f) {
    case optional {
        #some value -> return value
    } else return f()
}

pub proc expect(optional, reason) = optional
    |> unwrap_or_else(|| panic(reason))

pub proc iter(optional) = optional
    |> map(-> iter::over_value(it))
    |> unwrap_or(iter::empty())

pub proc flatten(optional) {
    case optional {
        #some nested_optional -> return nested_optional
    } else return #none unit
}