
mod std::str

use std::(iter, opt, math)

pub proc substring_until(s, end_index) {
    return s |> substring(0, end_index)
}

pub proc substring_after(s, start_index) {
    return s |> substring(start_index, s |> length())
}

pub proc at(s, index) {
    return s |> substring(index, index + 1)
}

pub proc starts_with(s, prefix) {
    case length(prefix) > length(s) -> return false
    var compared_prefix = s
        |> substring_until(length(prefix))
    return compared_prefix == prefix
}

pub proc ends_with(s, suffix) {
    case length(suffix) > length(s) -> return false
    var compared_suffix = s
        |> substring_after(-length(suffix))
    return compared_suffix == suffix
}

pub proc find(s, sub) {
    var current = { index = 0 }
    return || {
        mut var found = { value = #end unit }
        exhaust(|| {
            case current.index > length(s) - length(sub) -> return #end unit
            var c = current.index
            current.index = current.index + 1
            var compared_sub = s |> substring(c, c + length(sub))
            case compared_sub == sub -> {
                found.value = #next c
                return #end unit
            }
            return #next unit
        })
        return found.value
    }
}

pub proc pad_left(s, target_length, padding) {
    var fill_length = target_length - length(s)
    return padding
        |> string(math::max(fill_length / length(padding), 0))
        |> concat(padding |> substring_until(fill_length % length(padding)))
        |> concat(s)
}

pub proc pad_right(s, target_length, padding) {
    var fill_length = target_length - length(s)
    return s
        |> concat(padding |> string(math::max(fill_length / length(padding), 0)))
        |> concat(padding |> substring_until(fill_length % length(padding)))
}

pub proc fmt(s, v) {
    var current = { ci = 0, vi = 0, rs = s }
    exhaust(|| {
        case current.ci >= length(current.rs) -> return #end unit
        case current.vi >= length(v) -> return #end unit
        var ci = current.ci
        case at(current.rs, ci) == "_" -> {
            var inserted = v[current.vi]
            current.rs = current.rs
                |> substring_until(ci)
                |> concat(inserted)
                |> concat(current.rs |> substring_after(ci + 1))
            current.ci = ci + length(inserted)
            current.vi = current.vi + 1
        } else {
            current.ci = ci + 1
        }
        return #next unit
    })
    case current.vi < length(v) -> {
        "the format string '_' does not \
contain enough underscores for _ value(s)"
            |> fmt([s, v |> length() |> as_str()])
            |> panic()
    }
    return current.rs
}

pub proc split(s, separator) {
    var current = {
        anchor = 0,
        done = false
    }
    var until_length = length(s) - length(separator)
    return || {
        case current.done -> return #end unit
        var next_split
        case current.anchor <= until_length
            -> next_split = current.anchor..=until_length
                |> iter::find(|index| 
                    substring(s, index, index + length(separator)) == separator
                ) 
        else next_split = #none unit
        case next_split {
            #none -> {
                var result = s |> substring_after(
                    math::min(current.anchor, length(s))
                )
                current.anchor = length(s)
                current.done = true
                return #next result
            }
            #some i -> {
                var result = s |> substring(current.anchor, i)
                current.anchor = i + length(separator)
                return #next result
            }
        }
    }
}

pub proc join(strings, separator) {
    mut var result = {
        value = "",
        had_part = false
    }
    strings |> iter::for_each(|s| {
        case result.had_part
            -> result.value = result.value |> concat(separator)
        result.value = result.value |> concat(s)
        result.had_part = true
    })
    return result.value
}

pub proc iter(s) {
    return 0..length(s)
        |> iter::map(|i| s |> at(i))
}