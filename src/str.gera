
mod std::str

use std::iter::*
use std::opt::*
use std::math::*
use std::res::*

pub proc substring_until(s, end_index) = s
    |> substring(0, end_index)

pub proc substring_after(s, start_index) = s
    |> substring(start_index, s |> length())

pub proc at(s, index) = s
    |> substring(index, index + 1)

pub proc starts_with(s, prefix) {
    case length(prefix) > length(s) -> return false
    var compared_prefix = s
        |> substring_until(length(prefix))
    return compared_prefix == prefix
}

pub proc ends_with(s, suffix) {
    case length(suffix) > length(s) -> return false
    var compared_suffix = s
        |> substring_after(-length(suffix))
    return compared_suffix == suffix
}

pub proc find(s, sub) {
    mut var i = 0
    return || {
        mut var found = #end unit
        exhaust(|| {
            case i > length(s) - length(sub) -> return #end unit
            var c = i
            i = i + 1
            var compared_sub = s |> substring(c, c + length(sub))
            case compared_sub == sub -> {
                found = #next c
                return #end unit
            }
            return #next unit
        })
        return found
    }
}

pub proc pad_left(s, target_length, padding) {
    var fill_length = target_length - length(s)
    return padding
        |> repeat(max(fill_length / length(padding), 0))
        |> concat(padding |> substring_until(fill_length % length(padding)))
        |> concat(s)
}

pub proc pad_right(s, target_length, padding) {
    var fill_length = target_length - length(s)
    return s
        |> concat(padding |> repeat(max(fill_length / length(padding), 0)))
        |> concat(padding |> substring_until(fill_length % length(padding)))
}

pub proc fmt(s, v) {
    mut var ci = 0
    mut var vi = 0
    mut var rs = s
    exhaust(|| {
        case ci >= length(rs) -> return #end unit
        case vi >= length(v) -> return #end unit
        case at(rs, ci) == "_" -> {
            var inserted = v[vi]
            rs = rs
                |> substring_until(ci)
                |> concat(inserted)
                |> concat(rs |> substring_after(ci + 1))
            ci = ci + length(inserted)
            vi = vi + 1
        } else {
            ci = ci + 1
        }
        return #next unit
    })
    case vi < length(v) -> {
        "the format string '" 
            |> concat(s) 
            |> concat("' does not contain enough underscores for ") 
            |> concat(v |> length() |> as_str()) 
            |> concat(" value(s)") 
            |> panic()
    }
    return rs
}

pub proc split(s, sep) {
    mut var anchor = 0
    mut var done = false
    var until_length = length(s) - length(sep)
    return || {
        case done -> return #end unit
        var next_split
        case anchor <= until_length
            -> next_split = anchor..=until_length |> find(|index| 
                substring(s, index, index + length(sep)) == sep
            ) 
        else next_split = #none unit
        case next_split {
            #some i -> {
                var result = s |> substring(anchor, i)
                anchor = i + length(sep)
                return #next result
            }
            #none -> {
                var result = s |> substring_after(min(anchor, length(s)))
                anchor = length(s)
                done = true
                return #next result
            }
        }
    }
}

pub proc join(strings, sep) {
    mut var value = ""
    mut var had_part = false
    strings |> for_each(|s| {
        case had_part
            -> value = value |> concat(sep)
        value = value |> concat(s)
        had_part = true
    })
    return value
}

pub proc iter(s) = 0..length(s)
    |> map(|i| s |> at(i))

proc parse_digit(c) {
    var d
    case c {
        "0" -> d = 0  "1" -> d = 1  "2" -> d = 2
        "3" -> d = 3  "4" -> d = 4  "5" -> d = 5
        "6" -> d = 6  "7" -> d = 7  "8" -> d = 8
        "9" -> d = 9
    } else return #err unit
    return #ok d
}

proc parse_digits(s) {
    return s
        |> iter()
        |> reduce(|r, c| r |> and_then(|v|
            parse_digit(c) |> map(|d| v * 10 + d)
        ), #ok 0)
        |> std::res::map(|r| #some r)
        |> unwrap_or(#none unit)
}

pub proc parse_int(source) {
    case length(source) == 0 -> return #none unit
    mut var start = 0
    mut var sign = 1
    case source |> at(0) {
        "+" -> {
            case length(source) == 1 -> return #none unit
            start = 1
        }
        "-" -> {
            case length(source) == 1 -> return #none unit
            start = 1
            sign = -1
        }
    }
    return source
        |> substring_after(start)
        |> parse_digits()
        |> map(|r| r * sign)
}

proc char_to_ascii_lowercase(c) {
    var uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    var lowercase = "abcdefghijklmnopqrstuvwxyz"
    return uppercase
        |> find(c)
        |> next()
        |> map(|i| lowercase |> at(i))
        |> unwrap_or(c)
}

proc to_ascii_lowercase(s) {
    return s
        |> iter()
        |> map(char_to_ascii_lowercase)
        |> join("")
}

proc parse_fractional(source) {
    // parses '<int>(.<int>)' (parens = optional)
    case length(source) == 0 -> return #none unit
    var dot = source
        |> find(".")
        |> next()
        |> unwrap_or(source |> length())
    var whole
    case source |> substring_until(dot) |> parse_int() {
        #some r -> whole = r |> as_flt()
        #none -> case dot == 0 -> whole = 0.0
            else return #none unit
    }
    case dot >= length(source) -> return #some whole
    return 1..(length(source) - dot)
        |> reduce(|r, i| r |> and_then(|v| source
            |> at(dot + i)
            |> parse_digit()
            |> map(|d| v + as_flt(d) * pow(10.0, -as_flt(i)))
        ), #ok 0.0)
        |> map(|fraction| #some whole + fraction)
        |> unwrap_or(#none unit)
}

pub proc parse_flt(source) {
    case length(source) == 0 -> return #none unit
    // (optional) '+' or '-'
    mut var start = 0
    mut var sign = 1.0
    case source |> at(0) {
        "+" -> {
            case length(source) == 1 -> return #none unit
            start = 1
        }
        "-" -> {
            case length(source) == 1 -> return #none unit
            start = 1
            sign = -1.0
        }
    }
    var after_sign = source |> substring_after(start)
    // rest of input may be 'nan', 'inf' or 'infinity' here (case-insensitive)
    case after_sign |> to_ascii_lowercase() {
        "nan" -> return #some NAN * sign
        "inf" -> return #some INF * sign
        "infinity" -> return #some INF * sign
    }
    // parse everything up to the next 'e' or 'E' as a fractional
    var exponent = 0..length(after_sign)
        |> find(|i| at(after_sign, i) == "e" || at(after_sign, i) == "E")
        |> unwrap_or(after_sign |> length())
    var fractional
    case after_sign |> substring_until(exponent) |> parse_fractional() {
        #some f -> fractional = f
        #none -> return #none unit
    }
    // exponent is optional
    case exponent >= length(after_sign) -> return #some sign * fractional
    // sign of exponent after 'e' or 'E' (optional) '+' or '-'
    mut var exponent_sign = 1.0
    mut var exponent_start = exponent + 1
    case exponent_start >= length(after_sign) -> return #some sign * fractional
    case after_sign |> at(exponent_start) {
        "+" -> exponent_start = exponent + 2
        "-" -> {
            exponent_start = exponent + 2
            exponent_sign = -1.0
        }
    }
    // exponent value
    var exponent_val
    case after_sign |> substring_after(exponent_start) |> parse_int() {
        #some e -> exponent_val = pow(10.0, as_flt(e) * exponent_sign)
        #none -> case exponent_start == length(after_sign) -> exponent_val = 1.0
            else return #none unit
    }
    return #some sign * fractional * exponent_val
} 

pub proc repeat(repeated, times) = repeat_over(|| repeated)
    |> take(times)
    |> join("")