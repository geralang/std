/// This module contains procedures for working with result values.
mod std::res

use std::iter

/// Returns `true` if `result` contains a value.
pub proc is_ok(result) {
    case result {
        #ok -> return true
        #err -> return false
    }
}

/// Returns `true` if `result` contains an error.
pub proc is_err(result) {
    case result {
        #err -> return true
        #ok -> return false
    }
}

/// Returns the value contained by `result`.
pub proc get_ok(result) {
    case result {
        #ok o -> return #some o
        #err -> return #none unit
    }
}

/// Returns the error contained by `result`.
pub proc get_err(result) {
    case result {
        #err e -> return #some e
        #ok -> return #none unit
    }
}

/// Returns a new result value by passing the value possibly contained by
/// `result` to `mapping`.
pub proc map(result, mapping) {
    case result {
        #ok o -> return #ok mapping(o)
        #err -> return #err result
    }
}

/// Returns a new result value by passing the error possibly contained by
/// `result` to `mapping`.
pub proc map_err(result, mapping) {
    case result {
        #err e -> return #err mapping(e)
        #ok -> return #ok result 
    }
}

/// Returns either the value contained by `result`
/// or `default` if it contains an error.
pub proc unwrap_or(result, default) {
    case result {
        #ok o -> return o
        #err -> return default
    }
}

/// Returns either the error contained by `result`
/// or `default` if it contains a value.
pub proc unwrap_err_or(result, default) {
    case result {
        #err e -> return e
        #ok -> return default
    }
}

/// Returns either the value contained by `result`
/// or the result of calling `f` with the contained error.
pub proc unwrap_or_else(result, f) {
    case result {
        #ok o -> return o
        #err e -> return f(e)
    }
}

/// Returns either the error contained by `result`
/// or the result of calling `f` with the contained value.
pub proc unwrap_err_or_else(result, f) {
    case result {
        #ok o -> return f(o)
        #err e -> return e
    }
}

/// Returns the value contained by `result`.
/// This procedure shall be used if there is good reason to assume that
/// `result` will *always* contain a value, and the reasoning for this
/// shall be passed for `reason`.
/// If `result` does not contain a value, the a panic with the
/// given message `reason` will be triggered.
pub proc expect(result, reason) = result
    |> unwrap_or_else(|e| panic(reason))

/// Returns the error contained by `result`.
/// This procedure shall be used if there is good reason to assume that
/// `result` will *always* contain an error, and the reasoning for this
/// shall be passed for `reason`.
/// If `result` does not contain an error, the a panic with the
/// given message `reason` will be triggered.
pub proc expect_err(result, reason) = result
    |> unwrap_err_or_else(|o| panic(reason))

/// Returns `other` if `result` contains a value and otherwise returns `result`.
pub proc and(result, other) {
    case result {
        #ok -> return other
        #err -> return result
    }
}

/// Returns the result of calling `f` with the value contained by `result` or
/// simply returns `result` if it contain an error.
/// This differs from `std::res::map` in that for this procedure, `f` needs
/// to return a result instead of the new contained value.
pub proc and_then(result, f) {
    case result {
        #ok o -> return f(o)
        #err -> return result
    }
}

/// Returns `result` if `result` contains a value and otherwise returns `other`.
pub proc or(result, other) {
    case result {
        #err -> return other
        #ok -> return result
    }
}

/// Returns the result of calling `f` with the error contained by `result` or
/// simply returns `result` if it contain a value.
/// This differs from `std::res::map_err` in that for this procedure, `f` needs
/// to return a result instead of the new contained error.
pub proc or_else(result, f) {
    case result {
        #err e -> return f(e) 
        #ok -> return result
    }
}

/// Returns an iterator that returns the value contained by `result` once.
/// If `result` contains an error, an empty iterator is returned.
pub proc iter(result) = result
    |> map(-> iter::iter_value(it))
    |> unwrap_or(iter::empty())

/// Returns an iterator that returns the error contained by `result` once.
/// If `result` contains a value, an empty iterator is returned.
pub proc iter_err(result) = result
    |> map_err(-> iter::iter_value(it))
    |> unwrap_err_or(iter::empty())