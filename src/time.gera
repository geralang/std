
mod std::time

use std::internal::time::*
use std::(opt, iter, arr, str, math, if_else, if_else_lazy)

pub var JANUARY = 1
pub var FEBRUARY = 2
pub var MARCH = 3
pub var APRIL = 4
pub var MAY = 5
pub var JUNE = 6
pub var JULY = 7
pub var AUGUST = 8
pub var SEPTEMBER = 9
pub var OCTOBER = 10
pub var NOVEMBER = 11
pub var DECEMBER = 12

pub proc now_utc() {
    return internal_utc_unix_millis() + unix_epoch()
}

pub proc now_local() {
    return internal_local_unix_millis() + unix_epoch()
}

pub proc date(day, month, year) {
    return 0
        |> add_years(year - 1)
        |> add_months(month - 1)
        |> add_days(day - 1)
}

pub proc date_time(day, month, year, hour, minute, second) {
    return date(day, month, year)
        |> add_seconds(second)
        |> add_minutes(minute)
        |> add_hours(hour)
}

pub proc unix_epoch() {
    return 0 |> add_years(1969)
}

pub proc as_utc(local_tz_timestamp) {
    return local_tz_timestamp
        - (internal_local_unix_millis() - internal_utc_unix_millis())
}

pub proc as_local(utc_tz_timestamp) {
    return utc_tz_timestamp
        + (internal_local_unix_millis() - internal_utc_unix_millis())
}


pub proc as_weeks(timestamp) {
    return timestamp / static 1000 * 60 * 60 * 24 * 7
}
pub proc as_days(timestamp) {
    return timestamp / static 1000 * 60 * 60 * 24
}
pub proc as_hours(timestamp) {
    return timestamp / static 1000 * 60 * 60
}
pub proc as_minutes(timestamp) {
    return timestamp / static 1000 * 60
}
pub proc as_seconds(timestamp) {
    return timestamp / 1000
}


pub proc as_days_flt(timestamp) {
    return as_flt(timestamp) / static 1000.0 * 60.0 * 60.0 * 24.0
}
pub proc as_hours_flt(timestamp) {
    return as_flt(timestamp) / static 1000.0 * 60.0 * 60.0
}
pub proc as_minutes_flt(timestamp) {
    return as_flt(timestamp) / static 1000.0 * 60.0
}
pub proc as_seconds_flt(timestamp) {
    return as_flt(timestamp) / 1000.0
}

// pub proc years(y) {
//     var leap_years = y / 4 - y / 100 + y / 400
//     return days(y * 365 + leap_years)
// }
// pub proc months(m) {
//     var current_year = m / 12
//     var month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
//     case current_year |> is_leap_year() -> month_days[1] = 29
//     var current_year_days = 0..m % 12
//         |> iter::reduce(|s, m| s + month_days[m], 0)
//     return years(current_year) + days(current_year_days)
// }
pub proc weeks(w) {
    return w * static 1000 * 60 * 60 * 24 * 7
}
pub proc days(d) {
    return d * static 1000 * 60 * 60 * 24
}
pub proc hours(h) {
    return h * static 1000 * 60 * 60
}
pub proc minutes(m) {
    return m * static 1000 * 60
}
pub proc seconds(s) {
    return s * 1000
}

pub proc add_years(timestamp, y) {
    var sy = timestamp |> as_year_ad()
    return 0..y
        |> iter::map(|y| sy + y |> is_leap_year() |> if_else(366, 365))
        |> iter::reduce(|t, d| t + days(d), timestamp)
}
pub proc add_months(timestamp, m) {
    var month_days = [31, 0000, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    return 0..m
        |> iter::reduce(|r, m| {
            var is_leap_year = r |> as_year_ad() |> is_leap_year()
            month_days[1] = is_leap_year |> if_else(29, 28)
            var m = r |> as_month_of_year()
            return r + days(month_days[m])
        }, timestamp)
}
pub proc add_weeks(timestamp, w) {
    return timestamp + weeks(w)
}
pub proc add_days(timestamp, d) {
    return timestamp + days(d)
}
pub proc add_hours(timestamp, h) {
    return timestamp + hours(h)
}
pub proc add_minutes(timestamp, m) {
    return timestamp + minutes(m)
}
pub proc add_seconds(timestamp, s) {
    return timestamp + seconds(s)
}

pub proc is_leap_year(no_of_years_passed_ad) {
    var dyear = no_of_years_passed_ad + 1
    return dyear % 400 == 0 || (dyear % 100 != 0 && dyear % 4 == 0)
}

pub proc as_year_ad(timestamp) {
    var state = {
        days = timestamp |> as_days(),
        year = 0
    }
    iter::repeat_over(|| state)
        |> iter::take_while(|state|
            state.days >= (state.year |> is_leap_year() |> if_else(366, 365))
        )
        |> iter::for_each(|state| {
            state.days = state.days
                - (state.year |> is_leap_year() |> if_else(366, 365))
            state.year = state.year + 1
        })
    return state.year
}
pub proc as_month_of_year(timestamp) {
    var month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    case timestamp |> as_year_ad() |> is_leap_year() -> month_days[1] = 29
    var days = as_day_of_year(timestamp)
    return 0..length(month_days)
        |> iter::find(|m|
            days < iter::reduce(0..=m, |d, i| d + month_days[i], 0)
        )
        |> opt::expect("'as_day_of_year' can't return a day that's larger")
}
pub proc as_day_of_year(timestamp) {
    return timestamp - add_years(0, timestamp |> as_year_ad()) |> as_days()
}
pub proc as_day_of_month(timestamp) {
    var month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    case timestamp |> as_year_ad() |> is_leap_year() -> month_days[1] = 29
    var state = { days = as_day_of_year(timestamp) }
    arr::iter(month_days)
        |> iter::take_while(|m| m <= state.days)
        |> iter::for_each(|m| {
            state.days = state.days - m
        })
    return state.days
}
pub proc as_day_of_week(timestamp) {
    // January 1st, 1 AD was a Monday :)
    return as_days(timestamp) % 7
}
pub proc as_hour_of_day(timestamp) {
    return as_hours(timestamp) % 24
}
pub proc as_minute_of_hour(timestamp) {
    return as_minutes(timestamp) % 60
}
pub proc as_second_of_minute(timestamp) {
    return as_seconds(timestamp) % 60
}
pub proc as_milli_of_second(timestamp) {
    return timestamp % 1000
}

pub proc display_month(month) {
    var m
    case month < 0 -> m = month + (math::abs(month) / 12 + 1) * 12
    else m = month
    case (m % 12) + 1 {
        1 -> return "January"
        2 -> return "February"
        3 -> return "March"
        4 -> return "April"
        5 -> return "May"
        6 -> return "June"
        7 -> return "July"
        8 -> return "August"
        9 -> return "September"
        10 -> return "October"
        11 -> return "November"
        12 -> return "December"
    }
    return panic("all cases handled above")
}

pub proc display_weekday(day) {
    var d
    case day < 0 -> d = day + (math::abs(day) / 7 + 1) * 7
    else d = day
    case (d % 7) + 1 {
        1 -> return "Monday"
        2 -> return "Tuesday"
        3 -> return "Wednesday"
        4 -> return "Thursday"
        5 -> return "Friday"
        6 -> return "Saturday"
        7 -> return "Sunday"
    }
    return panic("all cases handled above")
}

pub proc display_day(day) {
    var last_digit = (day + 1) % 10
    var ending
    case last_digit {
        1 -> ending = day == 10 |> if_else("th", "st")
        2 -> ending = day == 11 |> if_else("th", "nd")
        3 -> ending = day == 12 |> if_else("th", "rd")
    } else ending = "th"
    return (day + 1) |> as_str() |> concat(ending)
}

pub proc format_date(timestamp, pattern) {
    return pattern
        |> str::split("{day}") |> str::join(
            timestamp |> as_day_of_month() |> display_day()
        )
        |> str::split("{weekday}") |> str::join(
            timestamp |> as_day_of_week() |> display_weekday()
        )
        |> str::split("{month}") |> str::join(
            timestamp |> as_month_of_year() |> display_month()
        )
        |> str::split("[second]") |> str::join(
            timestamp |> as_second_of_minute() |> as_str()
                |> str::pad_left(2, "0")
        )
        |> str::split("[minute]") |> str::join(
            timestamp |> as_minute_of_hour() |> as_str()
                |> str::pad_left(2, "0")
        )
        |> str::split("[hour]") |> str::join(
            timestamp |> as_hour_of_day() |> as_str()
                |> str::pad_left(2, "0")
        )
        |> str::split("[day]") |> str::join(
            (as_day_of_month(timestamp) + 1) |> as_str()
                |> str::pad_left(2, "0")
        )
        |> str::split("[month]") |> str::join(
            (as_month_of_year(timestamp) + 1) |> as_str()
                |> str::pad_left(2, "0")
        )
        |> str::split("[year]") |> str::join(
            (as_year_ad(timestamp) + 1) |> as_str()
                |> str::pad_left(4, "0")
        )
}