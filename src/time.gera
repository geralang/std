/// This module contains procedures and constants for working with time. 
mod std::time

use std::opt::expect
use std::arr::iter
use std::math::abs
use std::(if_else, if_else_lazy)
use std::internal::time::*
use std::iter::*
use std::str::*

/// Represents the month of January as an index (1-indexed), this being `1`.
pub val JANUARY = 1
/// Represents the month of February as an index (1-indexed), this being `2`.
pub val FEBRUARY = 2
/// Represents the month of March as an index (1-indexed), this being `3`.
pub val MARCH = 3
/// Represents the month of April as an index (1-indexed), this being `4`.
pub val APRIL = 4
/// Represents the month of May as an index (1-indexed), this being `5`.
pub val MAY = 5
/// Represents the month of June as an index (1-indexed), this being `6`.
pub val JUNE = 6
/// Represents the month of July as an index (1-indexed), this being `7`.
pub val JULY = 7
/// Represents the month of August as an index (1-indexed), this being `8`.
pub val AUGUST = 8
/// Represents the month of September as an index (1-indexed), this being `9`.
pub val SEPTEMBER = 9
/// Represents the month of October as an index (1-indexed), this being `10`.
pub val OCTOBER = 10
/// Represents the month of November as an index (1-indexed), this being `11`.
pub val NOVEMBER = 11
/// Represents the month of December as an index (1-indexed), this being `12`.
pub val DECEMBER = 12

/// Returns the number of millseconds
/// since the 1st of January, 1 AD at 00:00 in UTC.
pub proc now_utc() = internal_utc_unix_millis() + unix_epoch()

/// Returns the number of millseconds
/// since the 1st of January, 1 AD at 00:00 in local time.
pub proc now_local() = internal_local_unix_millis() + unix_epoch()

/// Computes the time passed since the 1st of January, 1 AD at 00:00
/// on the `day`th day of the `month`th month
/// of the year `year` AD (all 1-indexed) at 00:00.
pub proc date(day, month, year) = 0
    |> add_years(year - 1)
    |> add_months(month - 1)
    |> add_days(day - 1)

/// Computes the time passed since the 1st of January, 1 AD at 00:00
/// on the `day`th day of the `month`th month
/// of the year `year` AD (all 1-indexed) at `hour`:`minute`:`second`.
pub proc date_time(day, month, year, hour, minute, second)
    = date(day, month, year)
        |> add_seconds(second)
        |> add_minutes(minute)
        |> add_hours(hour)

/// Returns the number of milliseconds passed since
/// the 1st of January, 1 AD at 00:00 on the 1st of January, 1970 at 00:00.
pub proc unix_epoch() = 0 |> add_years(1969)

pub proc as_utc(local_tz_timestamp) = local_tz_timestamp
    - (internal_local_unix_millis() - internal_utc_unix_millis())

pub proc as_local(utc_tz_timestamp) = utc_tz_timestamp
    + (internal_local_unix_millis() - internal_utc_unix_millis())


/// The number of milliseconds in a week.
val WEEK_IN_MILLIS = 1000 * 60 * 60 * 24 * 7
/// The number of milliseconds in a day.
val DAY_IN_MILLIS = 1000 * 60 * 60 * 24
/// The number of milliseconds in an hour.
val HOUR_IN_MILLIS = 1000 * 60 * 60
/// The number of milliseconds in a minute.
val MINUTE_IN_MILLIS = 1000 * 60
/// The number of milliseconds in a second.
val SECOND_IN_MILLIS = 1000


/// Returns the number of full weeks that pass in `millis` milliseconds.
pub proc as_weeks(millis) = millis / WEEK_IN_MILLIS 

/// Returns the number of full days that pass in `millis` milliseconds.
pub proc as_days(millis) = millis / DAY_IN_MILLIS 

/// Returns the number of full hours that pass in `millis` milliseconds.
pub proc as_hours(millis) = millis / HOUR_IN_MILLIS 

/// Returns the number of full minutes that pass in `millis` milliseconds.
pub proc as_minutes(millis) = millis / MINUTE_IN_MILLIS 

/// Returns the number of full seconds that pass in `millis` milliseconds.
pub proc as_seconds(millis) = millis / SECOND_IN_MILLIS


/// Returns the number of weeks that pass in `millis` milliseconds.
pub proc as_days_flt(millis) = as_flt(millis)
    / as_flt(WEEK_IN_MILLIS)

/// Returns the number of hours that pass in `millis` milliseconds.
pub proc as_hours_flt(millis) = as_flt(millis)
    / as_flt(DAY_IN_MILLIS)

/// Returns the number of minutes that pass in `millis` milliseconds.
pub proc as_minutes_flt(millis) = as_flt(millis)
    / as_flt(MINUTE_IN_MILLIS)

/// Returns the number of seconds that pass in `millis` milliseconds.
pub proc as_seconds_flt(millis) = as_flt(millis)
    / as_flt(SECOND_IN_MILLIS)


/// Returns the number of milliseconds that pass in `w` weeks.
pub proc weeks(w) = w * WEEK_IN_MILLIS

/// Returns the number of milliseconds that pass in `d` days.
pub proc days(d) = d * DAY_IN_MILLIS

/// Returns the number of milliseconds that pass in `h` hours.
pub proc hours(h) = h * HOUR_IN_MILLIS

/// Returns the number of milliseconds that pass in `m` minutes.
pub proc minutes(m) = m * MINUTE_IN_MILLIS

/// Returns the number of milliseconds that pass in `s` seconds.
pub proc seconds(s) = s * SECOND_IN_MILLIS


/// Returns the number of milliseconds that will have passed `y` years
/// after the moment in time that is `timestamp` milliseconds after
/// the 1st of January 1 AD at 00:00, accounting for leap years.
pub proc add_years(timestamp, y) {
    val sy = timestamp |> as_year_ad()
    return 0..y
        |> map(|y| sy + y |> is_leap_year() |> if_else(366, 365))
        |> reduce(|t, d| t + days(d), timestamp)
}

/// Returns the number of milliseconds that will have passed `m` months
/// after the moment in time that is `timestamp` milliseconds after
/// the 1st of January 1 AD at 00:00,
/// accounting for leap years and the different lenghts of months.
pub proc add_months(timestamp, m) {
    val month_days = [31, 0000, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    return 0..m
        |> reduce(|r, m| {
            val is_leap_year = r |> as_year_ad() |> is_leap_year()
            month_days[1] = is_leap_year |> if_else(29, 28)
            val m = r |> as_month_of_year()
            return r + days(month_days[m])
        }, timestamp)
}

/// Returns the number of milliseconds that will have passed `w` weeks
/// after the moment in time that is `timestamp` milliseconds after
/// the 1st of January 1 AD at 00:00,
/// **not accounting for leap years or the different lenghts of months**.
pub proc add_weeks(timestamp, w) {
    return timestamp + weeks(w)
}

/// Returns the number of milliseconds that will have passed `d` days
/// after the moment in time that is `timestamp` milliseconds after
/// the 1st of January 1 AD at 00:00,
/// **not accounting for leap years or the different lenghts of months**.
pub proc add_days(timestamp, d) {
    return timestamp + days(d)
}

/// Returns the number of milliseconds that will have passed `h` hours
/// after the moment in time that is `timestamp` milliseconds after
/// the 1st of January 1 AD at 00:00,
/// **not accounting for leap years or the different lenghts of months**.
pub proc add_hours(timestamp, h) {
    return timestamp + hours(h)
}

/// Returns the number of milliseconds that will have passed `m` minutes
/// after the moment in time that is `timestamp` milliseconds after
/// the 1st of January 1 AD at 00:00,
/// **not accounting for leap years or the different lenghts of months**.
pub proc add_minutes(timestamp, m) {
    return timestamp + minutes(m)
}

/// Returns the number of milliseconds that will have passed `s` seconds
/// after the moment in time that is `timestamp` milliseconds after
/// the 1st of January 1 AD at 00:00,
/// **not accounting for leap years or the different lenghts of months**.
pub proc add_seconds(timestamp, s) {
    return timestamp + seconds(s)
}

/// Returns `true` if the year that is `no_of_years_passed_ad` years after
/// the year 1 AD is a leap year.
/// If `no_of_years_passed_ad` is `2019`, that would correspond to
/// the year 2020 AD, which was a leap year, resulting in `true` being returned.
pub proc is_leap_year(no_of_years_passed_ad) {
    val dyear = no_of_years_passed_ad + 1
    return dyear % 400 == 0 || (dyear % 100 != 0 && dyear % 4 == 0)
}

/// Returns the number of full years that have passed `timestamp` milliseconds
/// after the 1st of January, 1 AD at 00:00.
/// If `timestamp` was the number of milliseconds that passed
/// since the 1st of January, 1 AD at 00:00 on the 3rd of February, 1973
/// at 23:05:13, that would result in `1972` being returned.
pub proc as_year_ad(timestamp) {
    val state = {
        days = timestamp |> as_days(),
        year = 0
    }
    repeat_over(|| state)
        |> take_while(|state|
            state.days >= (state.year |> is_leap_year() |> if_else(366, 365))
        )
        |> for_each(|state| {
            state.days = state.days
                - (state.year |> is_leap_year() |> if_else(366, 365))
            state.year = state.year + 1
        })
    return state.year
}

/// Returns the number of full months passed since the start of the current
/// year at the moment that is `timestamp` milliseconds after the
/// 1st of January, 1 AD at 00:00.
/// If `timestamp` was the number of milliseconds that passed
/// since the 1st of January, 1 AD at 00:00 on the 3rd of February, 1973
/// at 23:05:13, that would result in `1` being returned.
pub proc as_month_of_year(timestamp) {
    val month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    case timestamp |> as_year_ad() |> is_leap_year() -> month_days[1] = 29
    val days = as_day_of_year(timestamp)
    return 0..length(month_days)
        |> find(|m| days < reduce(0..=m, |d, i| d + month_days[i], 0))
        |> expect("'as_day_of_year' can't return a day that's larger")
}

/// Returns the number of full days passed since the start of the current
/// year at the moment that is `timestamp` milliseconds after the
/// 1st of January, 1 AD at 00:00.
/// If `timestamp` was the number of milliseconds that passed
/// since the 1st of January, 1 AD at 00:00 on the 3rd of February, 1973
/// at 23:05:13, that would result in `33` being returned.
pub proc as_day_of_year(timestamp) {
    return timestamp - add_years(0, timestamp |> as_year_ad()) |> as_days()
}

/// Returns the number of full days passed since the start of the current
/// month at the moment that is `timestamp` milliseconds after the
/// 1st of January, 1 AD at 00:00.
/// If `timestamp` was the number of milliseconds that passed
/// since the 1st of January, 1 AD at 00:00 on the 3rd of February, 1973
/// at 23:05:13, that would result in `2` being returned.
pub proc as_day_of_month(timestamp) {
    val month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    case timestamp |> as_year_ad() |> is_leap_year() -> month_days[1] = 29
    val state = { days = as_day_of_year(timestamp) }
    iter(month_days)
        |> take_while(|m| m <= state.days)
        |> for_each(|m| {
            state.days = state.days - m
        })
    return state.days
}

/// Returns the number of full days passed since the start of the current
/// week at the moment that is `timestamp` milliseconds after the
/// 1st of January, 1 AD at 00:00.
/// If `timestamp` was the number of milliseconds that passed
/// since the 1st of January, 1 AD at 00:00 on the 3rd of February, 1973
/// at 23:05:13, that would result in `5` being returned.
pub proc as_day_of_week(timestamp) {
    // January 1st, 1 AD was a Monday :)
    return as_days(timestamp) % 7
}

/// Returns the number of full hours passed since the start of the current
/// day at the moment that is `timestamp` milliseconds after the
/// 1st of January, 1 AD at 00:00.
pub proc as_hour_of_day(timestamp) {
    return as_hours(timestamp) % 24
}

/// Returns the number of full minutes passed since the start of the current
/// hour at the moment that is `timestamp` milliseconds after the
/// 1st of January, 1 AD at 00:00.
pub proc as_minute_of_hour(timestamp) {
    return as_minutes(timestamp) % 60
}

/// Returns the number of full seconds passed since the start of the current
/// minute at the moment that is `timestamp` milliseconds after the
/// 1st of January, 1 AD at 00:00.
pub proc as_second_of_minute(timestamp) {
    return as_seconds(timestamp) % 60
}

/// Returns the number of full milliseconds passed since the start of the
/// current second at the moment that is `timestamp` milliseconds after the
/// 1st of January, 1 AD at 00:00.
pub proc as_milli_of_second(timestamp) {
    return timestamp % 1000
}

/// Returns the full English name of the month that is `month` months after
/// the start of the year (0-indexed).
pub proc display_month(month) {
    val m
    case month < 0 -> m = month + (abs(month) / 12 + 1) * 12
    else m = month
    case (m % 12) + 1 {
        1 -> return "January"
        2 -> return "February"
        3 -> return "March"
        4 -> return "April"
        5 -> return "May"
        6 -> return "June"
        7 -> return "July"
        8 -> return "August"
        9 -> return "September"
        10 -> return "October"
        11 -> return "November"
        12 -> return "December"
    }
    return panic("all cases handled above")
}

/// Returns the full English name of the weekday that is `day` days after
/// the start of the week (0-indexed).
pub proc display_weekday(day) {
    val d
    case day < 0 -> d = day + (abs(day) / 7 + 1) * 7
    else d = day
    case (d % 7) + 1 {
        1 -> return "Monday"
        2 -> return "Tuesday"
        3 -> return "Wednesday"
        4 -> return "Thursday"
        5 -> return "Friday"
        6 -> return "Saturday"
        7 -> return "Sunday"
    }
    return panic("all cases handled above")
}

/// Displays the English ordinal 1-indexed number
/// of the given 0-indexed day `day`.
/// If `day` was `5`, that would result in `"6th"` being returned.
pub proc display_day(day) {
    val last_digit = (day + 1) % 10
    val ending
    case last_digit {
        1 -> ending = day == 10 |> if_else("th", "st")
        2 -> ending = day == 11 |> if_else("th", "nd")
        3 -> ending = day == 12 |> if_else("th", "rd")
    } else ending = "th"
    return (day + 1) |> as_str() |> concat(ending)
}

/// In the context of the moment that is `timestamp` milliseconds after the
/// 1st of January, 1 AD at 00:00, returns `pattern`, replacing
/// `{day}` with the named current day of the month,
/// `{weekday}` with the named current day of the week,
/// `{month}` with the named current month of the year,
/// `[second]` with the current second of the minute,
/// `[minute]` with the current minute of the hour,
/// `[hour]` with the current hour of the day,
/// `[day]` with the current day of the month,
/// `[month]` with the current month of the year and
/// `[year]` with the current year.
/// A traditional US-style `pattern` would look like
/// `"[month]/[day]/[year] [hour]:[minute]:[second]"`.
pub proc format_date(timestamp, pattern) {
    return pattern
        |> split("{day}") |> join(
            timestamp |> as_day_of_month() |> display_day()
        )
        |> split("{weekday}") |> join(
            timestamp |> as_day_of_week() |> display_weekday()
        )
        |> split("{month}") |> join(
            timestamp |> as_month_of_year() |> display_month()
        )
        |> split("[second]") |> join(
            timestamp |> as_second_of_minute() |> as_str()
                |> pad_left(2, "0")
        )
        |> split("[minute]") |> join(
            timestamp |> as_minute_of_hour() |> as_str()
                |> pad_left(2, "0")
        )
        |> split("[hour]") |> join(
            timestamp |> as_hour_of_day() |> as_str()
                |> pad_left(2, "0")
        )
        |> split("[day]") |> join(
            (as_day_of_month(timestamp) + 1) |> as_str()
                |> pad_left(2, "0")
        )
        |> split("[month]") |> join(
            (as_month_of_year(timestamp) + 1) |> as_str()
                |> pad_left(2, "0")
        )
        |> split("[year]") |> join(
            (as_year_ad(timestamp) + 1) |> as_str()
                |> pad_left(4, "0")
        )
}