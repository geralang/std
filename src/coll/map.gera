
mod std::legacy::map

// mod std::map

// use std::opt
// use std::iter

// pub proc new() {
//     return {
//         hasher = |v| hash(v),
//         buckets = [],
//         load_factor = 0.75,
//         size = 0
//     } |> set_capacity(16)
// }

// pub proc set_hasher(m, new_hasher) {
//     m.hasher = new_hasher
//     return m
// }

// pub proc set_capacity(m, new_minimum_capacity) {
//     case length(m.buckets) >= new_minimum_capacity -> return m
//     var old_buckets = m.buckets
//     m.buckets = array(#none unit, new_minimum_capacity)
//     0..length(old_buckets) |> iter::for_each(|bucket_idx|
//         old_buckets[bucket_idx] |> opt::map(|n| {
//             var current = { node = n }
//             exhaust(|| {
//                 m |> set_h(current.node.h, current.node.key, current.node.value)
//                 case current.node.next {
//                     #none -> return #end unit
//                     #some n -> {
//                         current.node = n
//                         return #next unit
//                     }
//                 }
//             })
//         })
//     )
//     return m
// }

// pub proc set_load_factor(m, new_load_factor) {
//     m.load_factor = new_load_factor
//     return m
// }

// pub proc set(m, key, value) {
//     var h = key |> m.hasher()
//     m |> set_h(h, key, value)
//     return m
// }

// proc set_h(m, h, key, value) {
//     mut var bucket_idx = h % length(m.buckets)
//     case bucket_idx < 0 -> bucket_idx = length(m.buckets) + bucket_idx
//     m.buckets[bucket_idx] = m.buckets[bucket_idx]
//         |> opt::map(|n| {
//             var start = n
//             var current = {
//                 node = n,
//                 replaced = false
//             }
//             exhaust(|| {
//                 case current.node.h == h -> {
//                     current.node.key = key
//                     current.node.value = value
//                     current.replaced = true
//                     return #end unit
//                 }
//                 case current.node.next {
//                     #none -> return #end unit
//                     #some n -> {
//                         current.node = n
//                         return #next unit
//                     }
//                 } 
//             })
//             case current.replaced -> return #some start
//             current.node.next = #some {
//                 h = h, key = key, value = value, next = #none unit
//             }
//             m.size = m.size + 1
//             case m.size > as_int(as_flt(length(m.buckets)) * m.load_factor) ->
//                 m |> set_capacity(length(m.buckets) * 2)
//             return #some start
//         })
//         |> opt::unwrap_or_else(|| {
//             m.size = m.size + 1
//             return #some { h = h, key = key, value = value, next = #none unit }
//         })
//     return m
// }

// pub proc at(m, key) {
//     var h = key |> m.hasher()
//     return m |> at_h(h)
// }

// proc at_h(m, h) {
//     mut var bucket_idx = h % length(m.buckets)
//     case bucket_idx < 0 -> bucket_idx = length(m.buckets) + bucket_idx
//     return m.buckets[bucket_idx]
//         |> opt::map(|n| {
//             var current = {
//                 node = n,
//                 result = #none unit
//             }
//             exhaust(|| {
//                 case current.node.h == h -> {
//                     current.result = #some current.node.value
//                     return #end unit
//                 }
//                 case current.node.next {
//                     #none -> return #end unit
//                     #some n -> {
//                         current.node = n
//                         return #next unit
//                     }
//                 } 
//             })
//             return current.result
//         })
//         |> opt::flatten()
// }

// pub proc remove(m, key) {
//     var h = key |> m.hasher()
//     return m |> remove_h(h)
// }

// proc remove_h(m, h) {
//     mut var bucket_idx = h % length(m.buckets)
//     case bucket_idx < 0 -> bucket_idx = length(m.buckets) + bucket_idx
//     return m.buckets[bucket_idx]
//         |> opt::map(|n| {
//             var current = {
//                 node = n,
//                 last_node = #none unit,
//                 result = #none unit
//             }
//             exhaust(|| {
//                 case current.node.h == h -> {
//                     case current.last_node {
//                         #none -> m.buckets[bucket_idx] = current.node.next
//                         #some last_node -> last_node.next = current.node.next
//                     }
//                     current.result = #some current.node.value
//                     return #end unit
//                 }
//                 case current.node.next {
//                     #none -> return #end unit
//                     #some n -> {
//                         current.last_node = #some current.node
//                         current.node = n
//                         return #next unit
//                     }
//                 } 
//             })
//             return current.result
//         })
//         |> opt::flatten()
// }

// pub proc iter(m) {
//     mut var next_bucket_idx = 0
//     mut var bucket_idx = 0
//     mut var current_node = #none unit
//     return || {
//         var node
//         case current_node {
//             #none -> {
//                 case next_bucket_idx > length(m.buckets) -> return #end unit
//                 bucket_idx = next_bucket_idx
//                 next_bucket_idx = next_bucket_idx + 1
//                 node = m.buckets[bucket_idx]
//             }
//             #some n -> node = n
//         }
//         var entry = { key = node.key, value = node.value }
//         current_node = node.next
//         return #next entry
//     }
// }